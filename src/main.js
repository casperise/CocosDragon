// Autogenerated main.js file

require("native/jsb.js");

require("src/Bomb.js");
require("src/Coin.js");
require("src/Dragon.js");
require("src/EndCoin.js");
require("src/Explosion.js");
require("src/GameScene.js");
require("src/Level.js");
require("src/MainMenuScene.js");

/*
bool AppDelegate::applicationDidFinishLaunching()
{
    // initialize director
    CCDirector *pDirector = CCDirector::sharedDirector();
    pDirector->setOpenGLView(CCEGLView::sharedOpenGLView());
    pDirector->setProjection(kCCDirectorProjection2D);


    CCSize screenSize = CCEGLView::sharedOpenGLView()->getFrameSize();

    CCSize designSize = CCSizeMake(320, 480);
    CCSize resourceSize = CCSizeMake(320, 480);
    
    std::vector<std::string> resDirOrders;
    
    TargetPlatform platform = CCApplication::sharedApplication()->getTargetPlatform();
    if (platform == kTargetIphone || platform == kTargetIpad)
    {
        if (screenSize.height > 1024)
        {
            resourceSize = CCSizeMake(1536, 2048);
            resDirOrders.push_back("resources-ipadhd");
            resDirOrders.push_back("resources-ipad");
            resDirOrders.push_back("resources-iphonehd");
        }
        else if (screenSize.height > 960)
        {
            resourceSize = CCSizeMake(768, 1024);
            resDirOrders.push_back("resources-ipad");
            resDirOrders.push_back("resources-iphonehd");
        }
        else if (screenSize.height > 480)
        {
            resourceSize = CCSizeMake(640, 960);
            resDirOrders.push_back("resources-iphonehd");
            resDirOrders.push_back("resources-iphone");
        }
        else
        {
            resourceSize = CCSizeMake(320, 480);
            resDirOrders.push_back("resources-iphone");
        }
        
    }
    else if (platform == kTargetAndroid || platform == kTargetWindows)
    {
        if (screenSize.height > 960)
        {
            resourceSize = CCSizeMake(1280, 1920);
            resDirOrders.push_back("resources-xlarge");
            resDirOrders.push_back("resources-large");
            resDirOrders.push_back("resources-medium");
            resDirOrders.push_back("resources-small");
        }
        else if (screenSize.height > 720)
        {
            resourceSize = CCSizeMake(640, 960);
            resDirOrders.push_back("resources-large");
            resDirOrders.push_back("resources-medium");
            resDirOrders.push_back("resources-small");
        }
        else if (screenSize.height > 480)
        {
            resourceSize = CCSizeMake(480, 720);
            resDirOrders.push_back("resources-medium");
            resDirOrders.push_back("resources-small");
        }
        else
        {
            resourceSize = CCSizeMake(320, 480);
            resDirOrders.push_back("resources-small");
        }
    }
    
    CCFileUtils::sharedFileUtils()->setSearchResolutionsOrder(resDirOrders);
    
    pDirector->setContentScaleFactor(resourceSize.width/designSize.width);

    CCEGLView::sharedOpenGLView()->setDesignResolutionSize(designSize.width, designSize.height, kResolutionNoBorder);
    
    // turn on display FPS
    pDirector->setDisplayStats(true);
    
    // set FPS. the default value is 1.0/60 if you don't call this
    pDirector->setAnimationInterval(1.0 / 60);
    
    ScriptingCore* sc = ScriptingCore::getInstance();
    sc->addRegisterCallback(register_all_cocos2dx);
    sc->addRegisterCallback(register_cocos2dx_js_extensions);
    sc->addRegisterCallback(register_CCBuilderReader);
    sc->addRegisterCallback(jsb_register_chipmunk);
    sc->addRegisterCallback(jsb_register_system);
    
    sc->start();

    js_log("RUNNING Main");
    CCScriptEngineProtocol *pEngine = ScriptingCore::getInstance();
    CCScriptEngineManager::sharedManager()->setScriptEngine(pEngine);
    ScriptingCore::getInstance()->runScript("main.js");
       
    return true;
}
*/

function main()
{
    var fu = cc.FileUtils.getInstance();
    fu.loadFilenameLookup("fileLookup.plist");
    
    var director = cc.Director.getInstance();
    screenSize = director.getWinSize();
    
    var designSize = cc.size(320, 480);     // must correspond to Setup -> Design
    var resourceSize = cc.size(320, 480);
    
    //
    // CCFileUtils::sharedFileUtils()->setSearchResolutionsOrder(resDirOrders);
    //
    //fu.setResourceDirectory("resources-iphonehd");
    var os = __getOS(); // osx ios windows android linux
    if (os == "ios") {
        resourceSize = cc.size(768, 1024)
        ce.setResourceSearchPaths(["/Users/oxy/Temp/cocosdragon/resources-ipad"]);
    }    
    if (os == "osx") {
        resourceSize = cc.size(768, 1024);
        ce.setResourceSearchPaths(["/Users/oxy/Temp/cocosdragon/resources-ipad"]);
    }
    // ce.setResourceSearchPaths(["resources-ipadhd", "/Users/oxy/Temp/cocosdragon/resources-ipad", "resources-iphonehd"]);
    
    director.setContentScaleFactor(resourceSize.width / designSize.width);
    //
    // CCEGLView::sharedOpenGLView()->setDesignResolutionSize(designSize.width, designSize.height, kResolutionNoBorder);    
        
    //cc.Texture2D.setDefaultAlphaPixelFormat(6);
	var director = cc.Director.getInstance();
    var scene = cc.BuilderReader.loadAsScene("src/MainMenuScene.ccbi");
    var runningScene = director.getRunningScene();
    if (runningScene === null) 
        director.runWithScene(scene);
    else 
        director.replaceScene(scene);
}

main();
